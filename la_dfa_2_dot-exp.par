%start LaDfa2Dot
%title "LaDfa2Dot grammar"
%comment "Create a Graphviz representation of `parol`'s LookaheadDFAs"
%line_comment "//"
%block_comment "/\*" "\*/"

%%

/*   0 */ LaDfa2Dot: LaDfa2DotList /* Vec */;
/*   1 */ LaDfa2DotList /* Vec<T>::Push */: AttributeOpt^ /* Clipped */ Item LaDfa2DotList;
/*   2 */ LaDfa2DotList /* Vec<T>::New */: ;
/*   3 */ AttributeOpt: AttributeOpt0 /* Option */;
/*   4 */ AttributeOpt0 /* Option<T>::Some */: Hash LBracket Ident AttributeArgOpt RBracket;
/*   5 */ AttributeOpt0 /* Option<T>::None */: ;
/*   6 */ AttributeArgOpt: AttributeArgOpt0 /* Option */;
/*   7 */ AttributeArgOpt0 /* Option<T>::Some */: LParen Ident RParen;
/*   8 */ AttributeArgOpt0 /* Option<T>::None */: ;
/*   9 */ Item: UseStatement^ /* Clipped */;
/*  10 */ Item: ConstDeclaration;
/*  11 */ UseStatement: 'use' ScopedQualifiedIdent Semicolon;
/*  12 */ QualifiedIdent: Ident QualifiedIdentList /* Vec */;
/*  13 */ QualifiedIdentList /* Vec<T>::Push */: DoubleColon Ident QualifiedIdentList;
/*  14 */ QualifiedIdentList /* Vec<T>::New */: ;
/*  15 */ ScopedQualifiedIdent: QualifiedIdent ScopedQualifiedIdentOpt /* Option */;
/*  16 */ ScopedQualifiedIdentOpt /* Option<T>::Some */: DoubleColon ScopedList;
/*  17 */ ScopedQualifiedIdentOpt /* Option<T>::None */: ;
/*  18 */ ScopedList: LBrace ScopedListItems CommaOpt RBrace;
/*  19 */ ScopedListItems: ScopedQualifiedIdent ScopedListItemsList /* Vec */;
/*  20 */ ScopedListItemsList /* Vec<T>::Push */: Comma^ /* Clipped */ ScopedQualifiedIdent ScopedListItemsList;
/*  21 */ ScopedListItemsList /* Vec<T>::New */: ;
/*  22 */ ConstDeclaration: ConstPreamble TypeSpec^ /* Clipped */ Assign^ /* Clipped */ ConstVal Semicolon^ /* Clipped */;
/*  23 */ ConstDeclaration: ConstPreamble^ /* Clipped */ Skip^ /* Clipped */;
/*  24 */ ConstPreamble: ConstQualifier^ /* Clipped */ ConstName Colon^ /* Clipped */;
/*  25 */ ConstQualifier: ConstQualifierOpt /* Option */ 'const';
/*  26 */ ConstQualifier: 'static';
/*  27 */ ConstQualifierOpt /* Option<T>::Some */: 'pub';
/*  28 */ ConstQualifierOpt /* Option<T>::None */: ;
/*  29 */ ConstName: Ident;
/*  30 */ ConstVal: Number;
/*  31 */ ConstVal: String;
/*  32 */ ConstVal: QualifiedVal;
/*  33 */ ConstVal: ArrayVal;
/*  34 */ ConstVal: TupleVal;
/*  35 */ ArrayVal: Ref^ /* Clipped */ LBracket^ /* Clipped */ ArrayValOpt /* Option */ RBracket^ /* Clipped */;
/*  36 */ ArrayValOpt /* Option<T>::Some */: ConstValList CommaOpt^ /* Clipped */;
/*  37 */ ArrayValOpt /* Option<T>::None */: ;
/*  38 */ ConstValList: ConstVal ConstValListList /* Vec */;
/*  39 */ ConstValListList /* Vec<T>::Push */: Comma^ /* Clipped */ ConstVal ConstValListList;
/*  40 */ ConstValListList /* Vec<T>::New */: ;
/*  41 */ TupleVal: LParen^ /* Clipped */ TupleValOpt /* Option */ RParen^ /* Clipped */;
/*  42 */ TupleValOpt /* Option<T>::Some */: ConstValList CommaOpt^ /* Clipped */;
/*  43 */ TupleValOpt /* Option<T>::None */: ;
/*  44 */ QualifiedVal: QualifiedIdent QualifiedValOpt /* Option */;
/*  45 */ QualifiedValOpt /* Option<T>::Some */: StructOrTupleVal;
/*  46 */ QualifiedValOpt /* Option<T>::None */: ;
/*  47 */ StructOrTupleVal: StructVal;
/*  48 */ StructOrTupleVal: TupleStructVal;
/*  49 */ StructVal: LBrace^ /* Clipped */ StructValOpt /* Option */ RBrace^ /* Clipped */;
/*  50 */ StructValOpt /* Option<T>::Some */: MemberValues Comma^ /* Clipped */;
/*  51 */ StructValOpt /* Option<T>::None */: ;
/*  52 */ MemberValues: MemberValue MemberValuesList /* Vec */;
/*  53 */ MemberValuesList /* Vec<T>::Push */: Comma^ /* Clipped */ MemberValue MemberValuesList;
/*  54 */ MemberValuesList /* Vec<T>::New */: ;
/*  55 */ MemberValue: Ident Colon^ /* Clipped */ ConstVal;
/*  56 */ TupleStructVal: TupleVal;
/*  57 */ TypeSpec: QualifiedIdent;
/*  58 */ TypeSpec: ArrayType;
/*  59 */ TypeSpec: TupleType;
/*  60 */ TypeSpec: OptionType;
/*  61 */ ArrayType: Ref LBracket ArrayTypeSpec RBracket;
/*  62 */ ArrayTypeSpec: ArrayTypeSpecOpt /* Option */ ArrayElementType Semicolon Number;
/*  63 */ ArrayTypeSpecOpt /* Option<T>::Some */: Ref;
/*  64 */ ArrayTypeSpecOpt /* Option<T>::None */: ;
/*  65 */ ArrayElementType: Ident;
/*  66 */ ArrayElementType: Tuple;
/*  67 */ OptionType: 'Option' LT TypeSpec GT;
/*  68 */ Tuple: LParen TupleItems CommaOpt RParen;
/*  69 */ TupleType: LParen TupleItems CommaOpt RParen;
/*  70 */ TupleItems: TupleItemsOpt /* Option */ TypeSpec TupleItemsList /* Vec */;
/*  71 */ TupleItemsList /* Vec<T>::Push */: Comma TupleItemsOpt0 /* Option */ TypeSpec TupleItemsList;
/*  72 */ TupleItemsList /* Vec<T>::New */: ;
/*  73 */ TupleItemsOpt0 /* Option<T>::Some */: Ref;
/*  74 */ TupleItemsOpt0 /* Option<T>::None */: ;
/*  75 */ TupleItemsOpt /* Option<T>::Some */: Ref;
/*  76 */ TupleItemsOpt /* Option<T>::None */: ;
/*  77 */ Skip: /&\[Production; \d+\] = &\[[.\r\n]*/;
/*  78 */ CommaOpt: CommaOpt0 /* Option */;
/*  79 */ CommaOpt0 /* Option<T>::Some */: Comma;
/*  80 */ CommaOpt0 /* Option<T>::None */: ;
/*  81 */ Assign: '=';
/*  82 */ Number: /-?\d+/;
/*  83 */ Ref: '&';
/*  84 */ Semicolon: ';';
/*  85 */ Comma: ',';
/*  86 */ String: QuotedString;
/*  87 */ String: RawString;
/*  88 */ QuotedString: /r#{0, 3}".*"#{0, 3}/;
/*  89 */ RawString: /"(\\"|[^"])*"/;
/*  90 */ Ident: /[a-zA-Z_][a-zA-Z0-9_]*/;
/*  91 */ DoubleColon: '::';
/*  92 */ Colon: ':';
/*  93 */ LBrace: '{';
/*  94 */ RBrace: '}';
/*  95 */ LBracket: '[';
/*  96 */ RBracket: ']';
/*  97 */ LParen: '(';
/*  98 */ RParen: ')';
/*  99 */ Hash: /#/;
/* 100 */ LT: '<';
/* 101 */ GT: '>';
