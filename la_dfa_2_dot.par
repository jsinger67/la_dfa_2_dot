
%start LaDfa2Dot
%title "LaDfa2Dot grammar"
%comment "Create a Graphviz representation of `parol`'s LookaheadDFAs"
%line_comment '//'

%%

LaDfa2Dot
    : { AttributeOpt^ Item }
    ;

AttributeOpt
    : [ Hash LBracket Ident AttributeArgOpt RBracket ]
    ;

AttributeArgOpt
    : LParen Ident RParen
    ;

Item
    : UseStatement^ 
    | ConstDeclaration
    ;

// -------------------------------------------------------------------------------------------------
// UseStatement
// -------------------------------------------------------------------------------------------------
UseStatement
    : 'use' ScopedQualifiedIdent Semicolon
    ;

QualifiedIdent
    : Ident { DoubleColon Ident }
    ;

ScopedQualifiedIdent
    : QualifiedIdent [ DoubleColon ScopedList ]
    ;

ScopedList
    : LBrace ScopedListItems CommaOpt RBrace
    ;

ScopedListItems
    : ScopedQualifiedIdent { Comma^ ScopedQualifiedIdent }
    ;

// -------------------------------------------------------------------------------------------------
// ConstDeclaration
// -------------------------------------------------------------------------------------------------
ConstDeclaration
    : ConstPreamble TypeSpec Assign ConstVal Semicolon 
    | ConstPreamble^ Skip^
    ;

ConstPreamble
    : ConstQualifier ConstName Colon
    ;

ConstQualifier
    : [ 'pub' ] 'const' 
    | 'static'
    ;

ConstName
    : Ident
    ;

ConstVal
    : CommentOpt InnerConstVal
    ;

InnerConstVal
    : Number 
    | String
    | QualifiedVal
    | ArrayVal
    | TupleVal
    ;

ArrayVal
    : Amb LBracket [ ConstValList ] CommentOpt RBracket
    ;

ConstValList
    : ConstVal { Comma ConstVal } 
    | ConstVal Comma
    ;

TupleVal
    : LParen [ ConstValList ] RParen
    ;

QualifiedVal
    : QualifiedIdent [ StructOrTupleVal ]
    ;

StructOrTupleVal
    : StructVal 
    | TupleStructVal
    ;

StructVal
    : LBrace [ MemberValues ] RBrace
    ;

MemberValues
    : MemberValue { Comma MemberValue } CommaOpt
    ;

MemberValue
    : Ident Colon ConstVal
    ;

TupleStructVal
    : TupleVal
    ;

// -------------------------------------------------------------------------------------------------
// TypeSpec
// -------------------------------------------------------------------------------------------------
TypeSpec
    : QualifiedIdent 
    | ArrayType
    | TupleType
    ;

ArrayType
    : Amb LBracket ArrayTypeSpec RBracket
    ;

ArrayTypeSpec
    : [ Amb ] Ident Semicolon Number
    ;

TupleType
    : LParen TupleItems CommaOpt RParen
    ;

TupleItems
    : TypeSpec { Comma TypeSpec }
    ;

// We ignore the rest of the file from here on because we have parsed all necessary information
Skip
    : /(?s)Lazy<Vec<.*(?-s)/
    ;

// -------------------------------------------------------------------------------------------------
// Optionals
// -------------------------------------------------------------------------------------------------
CommaOpt
    : [ Comma ]
    ;

// -------------------------------------------------------------------------------------------------
// Comments
// -------------------------------------------------------------------------------------------------
CommentOpt
    : [ CommentVariants ]
    ;

CommentVariants
    : IgnoredComment^ 
    | NamingComment
    ;

NamingComment
    : BlockCommentStart^ Number Dash^ String BlockCommentEnd^ // /* 1 - "ArrayType" */
    ;

IgnoredComment
    : BlockCommentStart^ Number^ BlockCommentEnd^ // /*  0 */ 
    | BlockCommentStart^ Ident^ Colon^ String^ BlockCommentEnd^ // /* SCANNER_0: "INITIAL" */
    | BlockCommentStart^ Ident^ BlockCommentEnd^ // /* Comma */
    ;

// -------------------------------------------------------------------------------------------------
// Token definitions
// -------------------------------------------------------------------------------------------------
BlockCommentStart
    : "/\*"^
    ;

BlockCommentEnd
    : "\*/"^
    ;

Assign
    : '='
    ;

Number
    : /-?\d+/
    ;

Amb
    : '&'
    ;

Semicolon
    : ';'
    ;

Comma
    : ','
    ;

String
    : /(r#*)?"(\\.|[^\\])*?"#*/
    ;

Ident
    : /[a-zA-Z_][a-zA-Z0-9_]*/
    ;

DoubleColon
    : '::'
    ;

Colon
    : ':'
    ;

LBrace
    : '{'
    ;

RBrace
    : '}'
    ;

LBracket
    : '['
    ;

RBracket
    : ']'
    ;

LParen
    : '('
    ;

RParen
    : ')'
    ;

Hash
    : /#/
    ;

Dash
    : '-'
    ;