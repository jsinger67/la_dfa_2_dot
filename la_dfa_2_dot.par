
// This grammar is made to only be able to parse generated parser sources.
// No claim to parse full Rust.
// It even skips parts of the file after all necessary information is gathered (see 'Skip' below).
// The real new thing here is that we use the new comment preserving feature of
// parol 0.22.0 and parol_runtime 0.17.0.
%start LaDfa2Dot
%title "LaDfa2Dot grammar"
%comment "Create a Graphviz representation of `parol`'s LookaheadDFAs"
%line_comment '//'
%block_comment '/*' '*/'

%%

LaDfa2Dot
    : { AttributeOpt^ Item }
    ;

AttributeOpt
    : [ Hash LBracket Ident AttributeArgOpt RBracket ]
    ;

AttributeArgOpt
    : [ LParen Ident RParen ]
    ;

Item
    : UseStatement^ 
    | ConstDeclaration
    ;

// -------------------------------------------------------------------------------------------------
// UseStatement
// -------------------------------------------------------------------------------------------------
UseStatement
    : 'use' ScopedQualifiedIdent Semicolon
    ;

QualifiedIdent
    : Ident { DoubleColon Ident }
    ;

ScopedQualifiedIdent
    : QualifiedIdent [ DoubleColon ScopedList ]
    ;

ScopedList
    : LBrace ScopedListItems CommaOpt RBrace
    ;

ScopedListItems
    : ScopedQualifiedIdent { Comma^ ScopedQualifiedIdent }
    ;

// -------------------------------------------------------------------------------------------------
// ConstDeclaration
// -------------------------------------------------------------------------------------------------
ConstDeclaration
    : ConstPreamble TypeSpec^ Assign^ ConstVal Semicolon^ 
    | ConstPreamble^ Skip^
    ;

ConstPreamble
    : ConstQualifier^ ConstName Colon^
    ;

ConstQualifier
    : [ 'pub' ] 'const' 
    | 'static'
    ;

ConstName
    : Ident
    ;

ConstVal
    : Number 
    | String
    | QualifiedVal
    | ArrayVal
    | TupleVal
    ;

ArrayVal
    : Ref^ LBracket^ [ ConstValList CommaOpt^ ] RBracket^
    ;

ConstValList
    : ConstVal { Comma^ ConstVal }
    ;

TupleVal
    : LParen^ [ ConstValList CommaOpt^ ] RParen^
    ;

QualifiedVal
    : QualifiedIdent [ StructOrTupleVal ]
    ;

StructOrTupleVal
    : StructVal 
    | TupleStructVal
    ;

StructVal
    : LBrace^ [ MemberValues Comma^ ] RBrace^
    ;

MemberValues
    : MemberValue { Comma^ MemberValue }
    ;

MemberValue
    : Ident Colon^ ConstVal
    ;

TupleStructVal
    : TupleVal
    ;

// -------------------------------------------------------------------------------------------------
// TypeSpec
// -------------------------------------------------------------------------------------------------
TypeSpec
    : QualifiedIdent 
    | ArrayType
    | TupleType
    ;

ArrayType
    : Ref LBracket ArrayTypeSpec RBracket
    ;

ArrayTypeSpec
    : [ Ref ] Ident Semicolon Number
    ;

TupleType
    : LParen TupleItems CommaOpt RParen
    ;

TupleItems
    : TypeSpec { Comma TypeSpec }
    ;

// We ignore the rest of the file from here on because we have parsed all necessary information
Skip
    : /(?s)&\[Production; \d+\] = &\[.*(?-s)/
    ;

// -------------------------------------------------------------------------------------------------
// Optionals
// -------------------------------------------------------------------------------------------------
CommaOpt
    : [ Comma ]
    ;

// -------------------------------------------------------------------------------------------------
// Token definitions
// -------------------------------------------------------------------------------------------------
Assign
    : '='
    ;

Number
    : /-?\d+/
    ;

Ref
    : '&'
    ;

Semicolon
    : ';'
    ;

Comma
    : ','
    ;

String
    : QuotedString 
    | RawString
    ;

QuotedString
    : /r#{0, 3}".*"#{0, 3}/
    ;

RawString
    : /"(\\.|[^\\])*?"/
    ;

Ident
    : /[a-zA-Z_][a-zA-Z0-9_]*/
    ;

DoubleColon
    : '::'
    ;

Colon
    : ':'
    ;

LBrace
    : '{'
    ;

RBrace
    : '}'
    ;

LBracket
    : '['
    ;

RBracket
    : ']'
    ;

LParen
    : '('
    ;

RParen
    : ')'
    ;

Hash
    : /#/
    ;
