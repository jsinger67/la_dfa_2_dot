
%start LaDfa2Dot
%title "LaDfa2Dot grammar"
%comment "Create a Graphviz representation of `parol`'s LookaheadDFAs"
%line_comment '//'
%block_comment "/\*" "\*/"

%%

LaDfa2Dot
    : { AttributeOpt^ Item }
    ;

AttributeOpt
    : [ Hash LBracket Ident AttributeArgOpt RBracket ]
    ;

AttributeArgOpt
    : LParen Ident RParen
    ;

Item
    : UseStatement^ 
    | ConstDeclaration
    ;

// -------------------------------------------------------------------------------------------------
// UseStatement
// -------------------------------------------------------------------------------------------------
UseStatement
    : 'use' ScopedQualifiedIdent Semicolon
    ;

QualifiedIdent
    : Ident { DoubleColon Ident }
    ;

ScopedQualifiedIdent
    : QualifiedIdent [ DoubleColon ScopedList ]
    ;

ScopedList
    : LBrace ScopedListItems CommaOpt RBrace
    ;

ScopedListItems
    : ScopedQualifiedIdent { Comma^ ScopedQualifiedIdent }
    ;

// -------------------------------------------------------------------------------------------------
// ConstDeclaration
// -------------------------------------------------------------------------------------------------
ConstDeclaration
    : ConstPreamble TypeSpec Assign ConstVal Semicolon
    | ConstPreamble Skip
    ;

ConstPreamble
    : ConstQualifier ConstName Colon
    ;

ConstQualifier
    : [ 'pub' ] 'const' 
    | 'static'
    ;

ConstName
    : Ident
    ;

ConstVal
    : Number 
    | String
    | QualifiedVal
    | ArrayVal
    | TupleVal
    ;

ArrayVal
    : Amb LBracket [ ConstValList ] CommaOpt RBracket
    ;

ConstValList
    : ConstVal { Comma ConstVal }
    ;

TupleVal
    : LParen [ TupleValues ] CommaOpt RParen
    ;

TupleValues
    : ConstVal { Comma ConstVal }
    ;

QualifiedVal
    : QualifiedIdent [ StructVal 
    | TupleStructVal]
    ;

StructVal
    : LBrace [ MemberValues ] RBrace
    ;

MemberValues
    : MemberValue { Comma MemberValue } CommaOpt
    ;

MemberValue
    : Ident Colon ConstVal
    ;

TupleStructVal
    : TupleVal
    ;

// -------------------------------------------------------------------------------------------------
// TypeSpec
// -------------------------------------------------------------------------------------------------
TypeSpec
    : QualifiedIdent 
    | ArrayType
    | TupleType
    ;

ArrayType
    : Amb LBracket ArrayTypeSpec RBracket
    ;

ArrayTypeSpec
    : [ Amb ] Ident Semicolon Number
    ;

TupleType
    : LParen TupleItems CommaOpt RParen
    ;

TupleItems
    : TypeSpec { Comma TypeSpec }
    ;

Skip
    : /(?s)Lazy<Vec<.*(?-s)/
    ;

// -------------------------------------------------------------------------------------------------
// Optionals
// -------------------------------------------------------------------------------------------------
CommaOpt
    : [ Comma ]
    ;

// -------------------------------------------------------------------------------------------------
// Token definitions
// -------------------------------------------------------------------------------------------------
Assign
    : '='
    ;

Number
    : /-?\d+/
    ;

Amb
    : '&'
    ;

Semicolon
    : ';'
    ;

Comma
    : ','
    ;

String
    : /(r#*)?"(\\.|[^\\])*?"#*/
    ;

Ident
    : /[a-zA-Z_][a-zA-Z0-9_]*/
    ;

DoubleColon
    : '::'
    ;

Colon
    : ':'
    ;

LBrace
    : '{'
    ;

RBrace
    : '}'
    ;

LBracket
    : '['
    ;

RBracket
    : ']'
    ;

LParen
    : '('
    ;

RParen
    : ')'
    ;

Hash
    : /#/
    ;
